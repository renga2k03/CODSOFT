# -*- coding: utf-8 -*-
"""mov_rec.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QKKakaJR1RFPD5uMxZ2t5ny9LvS-TcIq
"""

import pandas as pd
import numpy as np
mov_df = pd.read_csv('tmdb_5000_movies.csv')
cred_df = pd.read_csv('tmdb_5000_credits.csv')

mov_df_2 = mov_df.rename(index=str, columns={"id": "movie_id"})
mov_cred_df = mov_df_2.merge(cred_df, on='movie_id')
mov_cred_df.head()

overview = mov_cred_df['overview'].fillna('')
overview.head()

from sklearn.feature_extraction.text import TfidfVectorizer
tfidf = TfidfVectorizer( min_df = 3, max_features = None, strip_accents = 'unicode', analyzer = 'word',
                        token_pattern = r'\w{1,}', ngram_range = (1,3), stop_words='english')
tf_mat = tfidf.fit_transform(overview)
tf_mat

from sklearn.metrics.pairwise import sigmoid_kernel
sim_mat = sigmoid_kernel(tf_mat, tf_mat)

def contentbasedRec(name):
    index = mov_cred_df[mov_cred_df['original_title'] == name].index[0]
    similarities = list(enumerate(sim_mat[index]))
    similarities = sorted(similarities, key=lambda x: x[1], reverse=True)
    similarities = similarities[1:16]
    recommendations = []
    for i in similarities:
      recommendations.append(mov_cred_df.iloc[i[0]].original_title)
    return(recommendations)

from sklearn.metrics.pairwise import cosine_similarity
ratings_df = mov_cred_df.pivot_table(columns = ['original_title'], values = ('vote_average', 'vote_count'))
ratings_df = ratings_df.fillna(0)
cos_sim = cosine_similarity(ratings_df.T)
cos_sim_mat = pd.DataFrame(cos_sim, index = ratings_df.columns, columns = ratings_df.columns)

def ratingsbasedRec(name, rating):
    cos_sim_value = cos_sim_mat[name]*(rating - 5)
    cos_sim_value = cos_sim_value.sort_values(ascending=False)
    return cos_sim_value

print("Welcome! This is a movie-recommendation system")
inputs = []
while True:
    movie = input("\nEnter a movie name : ")
    content_based = contentbasedRec(movie)
    ratings = float(input("\nEnter your rating for the movie : "))
    inputs.append((movie, ratings))
    similar_movies = pd.DataFrame()
    for movie, rating in inputs:
        similar_movies = similar_movies._append(ratingsbasedRec(movie, rating), ignore_index=True)
    similar_ratings = similar_movies.sum().sort_values(ascending=False)
    print("\nTop 15 movie recommendations based on content :\n")
    for mov in content_based:
        avg_rating = mov_cred_df[mov_cred_df['original_title'] == mov]
        if content_based[-1] != mov:
            print(mov, '(', avg_rating['vote_average'].values[0], end=" ) , ")
        else:
            print(mov, '(', avg_rating['vote_average'].values[0], end=" )\n")
    print("\nTop 15 movie recommendations based on ratings :\n")
    ratings_based = list(similar_ratings.head(15).index)
    for mov in ratings_based:
        avg_rating = mov_cred_df[mov_cred_df['original_title'] == mov]
        if ratings_based[-1] != mov:
            print(mov, '(', avg_rating['vote_average'].values[0], end=" ) , ")
        else:
            print(mov, '(', avg_rating['vote_average'].values[0], end=" )\n")
    choice = input("\nIf you want to exit, enter y. Otherwise press any key : ")
    if choice == 'y' or choice == 'Y':
        break
